// This is your Prisma schema file for Vercel deployment
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Core User Account Model
model Account {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  email               String       @unique
  password            String // Hashed password for authentication
  firstName           String // User's first name
  lastName            String // User's last name
  displayName         String // Full display name (computed or set)
  profileImageURL     String?
  role                UserRole     @default(STUDENT) // User role for authorization
  assignedIAMPolicies String[] // Array of IAM policy IDs
  accountState        AccountState @default(ACTIVE)
  isActive            Boolean      @default(true) // Account active status
  lastLoginAt         DateTime? // Last login timestamp
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Relations
  attendees Attendee[]

  @@map("accounts")
}

// Attendee/Student Model
model Attendee {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  enrollmentId          String   @unique
  name                  String
  course                String
  school                String
  degree                String
  email                 String
  phone                 String?
  convocationEligible   Boolean  @default(false)
  convocationRegistered Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  crr                   String   @db.ObjectId
  enclosure             String

  // Relations
  account    Account?        @relation(fields: [accountId], references: [id])
  accountId  String?         @db.ObjectId
  allocation SeatAllocation?

  @@map("attendees")
}

// Seat Allocation Model
model SeatAllocation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  enclosure   String
  row         String
  column        Int
  allocatedAt DateTime @default(now())

  // Relations
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  attendeeId String   @unique @db.ObjectId

  @@map("seat_allocations")
}

// Enclosure/Venue Mapping Model
model Enclosure {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  letter         String
  allocatedFor   EnclosureType
  entryDirection Direction
  totalSeats     Int

  // Relations
  rows   Row[]
  colums Column[]

  @@map("enclosures")
}

// column Configuration Model
model Column {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  letter    String
  startSeat Int
  endSeat   Int

  // Relations
  enclosure   Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade)
  enclosureId String    @db.ObjectId

  @@map("colums")
}

// Row Configuration Model
model Row {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  letter    String
  endLetter String
  reserved  EnclosureType

  // Relations
  enclosure   Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade)
  enclosureId String    @db.ObjectId

  @@map("rows")
}

// Analytics Model
model Analytics {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime @unique
  visitors       Int      @default(0)
  pageViews      Int      @default(0)
  uniqueVisitors Int      @default(0)
  countries      Json     @default("{}")
  languages      Json     @default("{}")
  devices        Json     @default("{}")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("analytics")
}

// IAM Policy Model
model IAMPolicy {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("iam_policies")
}

// Department Model
model Department {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  code      String   @unique
  school    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

// Convocation Event Model
model Convocation {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  description           String?
  eventDate             DateTime
  registrationStartDate DateTime
  registrationEndDate   DateTime
  venue                 String
  isActive              Boolean  @default(true)
  maxAttendees          Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("convocations")
}

// Enums
enum UserRole {
  ADMIN
  STAFF
  STUDENT
}

enum AccountState {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum EnclosureType {
  STUDENTS
  FACULTY
  STAFF
  GUESTS
  VIP
  MIXED
}

enum Direction {
  NORTH
  SOUTH
  EAST
  WEST
  NORTHEAST
  NORTHWEST
  SOUTHEAST
  SOUTHWEST
}
