
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  displayName: 'displayName',
  profileImageURL: 'profileImageURL',
  role: 'role',
  assignedIAMPolicies: 'assignedIAMPolicies',
  accountState: 'accountState',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendeeScalarFieldEnum = {
  id: 'id',
  enrollmentId: 'enrollmentId',
  name: 'name',
  course: 'course',
  school: 'school',
  degree: 'degree',
  email: 'email',
  phone: 'phone',
  convocationEligible: 'convocationEligible',
  convocationRegistered: 'convocationRegistered',
  assignedEnclosure: 'assignedEnclosure',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  crr: 'crr',
  accountId: 'accountId'
};

exports.Prisma.SeatAllocationScalarFieldEnum = {
  id: 'id',
  enclosureLetter: 'enclosureLetter',
  rowLetter: 'rowLetter',
  seatNumber: 'seatNumber',
  allocatedAt: 'allocatedAt',
  enclosureId: 'enclosureId',
  attendeeId: 'attendeeId'
};

exports.Prisma.EnclosureScalarFieldEnum = {
  id: 'id',
  letter: 'letter',
  name: 'name',
  allocatedFor: 'allocatedFor',
  entryDirection: 'entryDirection',
  displayOrder: 'displayOrder',
  totalSeats: 'totalSeats',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RowScalarFieldEnum = {
  id: 'id',
  letter: 'letter',
  startSeat: 'startSeat',
  endSeat: 'endSeat',
  reservedSeats: 'reservedSeats',
  displayOrder: 'displayOrder',
  enclosureId: 'enclosureId'
};

exports.Prisma.SeatReservationScalarFieldEnum = {
  id: 'id',
  enclosureLetter: 'enclosureLetter',
  rowLetter: 'rowLetter',
  seatNumber: 'seatNumber',
  reservedFor: 'reservedFor',
  reservedBy: 'reservedBy',
  createdAt: 'createdAt'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  visitors: 'visitors',
  pageViews: 'pageViews',
  uniqueVisitors: 'uniqueVisitors',
  countries: 'countries',
  languages: 'languages',
  devices: 'devices',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IAMPolicyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  school: 'school',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConvocationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  eventDate: 'eventDate',
  registrationStartDate: 'registrationStartDate',
  registrationEndDate: 'registrationEndDate',
  venue: 'venue',
  isActive: 'isActive',
  maxAttendees: 'maxAttendees',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  STAFF: 'STAFF',
  STUDENT: 'STUDENT'
};

exports.AccountState = exports.$Enums.AccountState = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING_VERIFICATION: 'PENDING_VERIFICATION'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.EnclosureType = exports.$Enums.EnclosureType = {
  STUDENTS: 'STUDENTS',
  FACULTY: 'FACULTY',
  STAFF: 'STAFF',
  GUESTS: 'GUESTS',
  VIP: 'VIP',
  MIXED: 'MIXED'
};

exports.Direction = exports.$Enums.Direction = {
  NORTH: 'NORTH',
  SOUTH: 'SOUTH',
  EAST: 'EAST',
  WEST: 'WEST',
  NORTHEAST: 'NORTHEAST',
  NORTHWEST: 'NORTHWEST',
  SOUTHEAST: 'SOUTHEAST',
  SOUTHWEST: 'SOUTHWEST',
  LEFT: 'LEFT',
  RIGHT: 'RIGHT',
  CENTER: 'CENTER'
};

exports.Prisma.ModelName = {
  Account: 'Account',
  Attendee: 'Attendee',
  SeatAllocation: 'SeatAllocation',
  Enclosure: 'Enclosure',
  Row: 'Row',
  SeatReservation: 'SeatReservation',
  Analytics: 'Analytics',
  IAMPolicy: 'IAMPolicy',
  Department: 'Department',
  Convocation: 'Convocation'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/mnt/240GB_SATA/Development/Parul/convocation-pu/apps/api/prisma/generated/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/mnt/240GB_SATA/Development/Parul/convocation-pu/apps/api/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../..",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mongodb",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file for Vercel deployment\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"./generated/client\"\n}\n\ndatasource db {\n  provider = \"mongodb\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Core User Account Model\nmodel Account {\n  id                  String       @id @default(auto()) @map(\"_id\") @db.ObjectId\n  email               String       @unique\n  password            String // Hashed password for authentication\n  firstName           String // User's first name\n  lastName            String // User's last name\n  displayName         String // Full display name (computed or set)\n  profileImageURL     String?\n  role                UserRole     @default(STUDENT) // User role for authorization\n  assignedIAMPolicies String[] // Array of IAM policy IDs\n  accountState        AccountState @default(ACTIVE)\n  isActive            Boolean      @default(true) // Account active status\n  lastLoginAt         DateTime? // Last login timestamp\n  createdAt           DateTime     @default(now())\n  updatedAt           DateTime     @updatedAt\n\n  // Relations\n  attendees Attendee[]\n\n  @@map(\"accounts\")\n}\n\n// Attendee/Student Model\nmodel Attendee {\n  id                    String  @id @default(auto()) @map(\"_id\") @db.ObjectId\n  enrollmentId          String  @unique\n  name                  String\n  course                String\n  school                String\n  degree                String\n  email                 String\n  phone                 String?\n  convocationEligible   Boolean @default(false)\n  convocationRegistered Boolean @default(false)\n\n  // Enclosure assignment - stored in database\n  assignedEnclosure String? // Enclosure letter (A, B, C, etc.)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  crr       String   @db.ObjectId\n\n  // Relations\n  account    Account?        @relation(fields: [accountId], references: [id])\n  accountId  String?         @db.ObjectId\n  allocation SeatAllocation?\n\n  @@map(\"attendees\")\n}\n\n// Enhanced SeatAllocation Model\nmodel SeatAllocation {\n  id              String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  enclosureLetter String // Changed to letter for easier querying\n  rowLetter       String // Row letter (A, B, C)\n  seatNumber      Int // Actual seat number\n  allocatedAt     DateTime @default(now())\n\n  // Relations\n  enclosure   Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade)\n  enclosureId String    @db.ObjectId\n  attendee    Attendee  @relation(fields: [attendeeId], references: [id], onDelete: Cascade)\n  attendeeId  String    @unique @db.ObjectId\n\n  @@unique([enclosureLetter, rowLetter, seatNumber]) // Prevent double allocation\n  @@index([enclosureLetter, rowLetter])\n  @@index([enclosureId])\n  @@map(\"seat_allocations\")\n}\n\n// Enhanced Enclosure Model\nmodel Enclosure {\n  id             String        @id @default(auto()) @map(\"_id\") @db.ObjectId\n  letter         String        @unique // A, B, C, etc.\n  name           String? // Optional: \"North Wing\", \"Main Hall\"\n  allocatedFor   EnclosureType\n  entryDirection Direction\n  displayOrder   Int           @default(0) // Order to display in UI\n  totalSeats     Int           @default(0) // Auto-calculated\n  isActive       Boolean       @default(true)\n\n  // Relations\n  rows            Row[]\n  seatAllocations SeatAllocation[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"enclosures\")\n}\n\n// Enhanced Row Model\nmodel Row {\n  id            String @id @default(auto()) @map(\"_id\") @db.ObjectId\n  letter        String // Row identifier (A, B, C, etc.)\n  startSeat     Int // First seat number in row\n  endSeat       Int // Last seat number in row\n  reservedSeats String @default(\"\") // Comma-separated reserved seat numbers: \"1,5,10\"\n  displayOrder  Int    @default(0) // Order of rows in enclosure\n\n  // Relations\n  enclosure   Enclosure @relation(fields: [enclosureId], references: [id], onDelete: Cascade)\n  enclosureId String    @db.ObjectId\n\n  @@unique([enclosureId, letter])\n  @@index([enclosureId, displayOrder])\n  @@map(\"rows\")\n}\n\n// Admin Seat Reservation Model - NEW\nmodel SeatReservation {\n  id              String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  enclosureLetter String // Enclosure letter\n  rowLetter       String // Row letter\n  seatNumber      Int // Reserved seat number\n  reservedFor     String? // Optional: reason or person name\n  reservedBy      String? // Admin who reserved it\n  createdAt       DateTime @default(now())\n\n  @@unique([enclosureLetter, rowLetter, seatNumber]) // Prevent duplicate reservations\n  @@index([enclosureLetter])\n  @@map(\"seat_reservations\")\n}\n\n// Analytics Model\nmodel Analytics {\n  id             String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  date           DateTime @unique\n  visitors       Int      @default(0)\n  pageViews      Int      @default(0)\n  uniqueVisitors Int      @default(0)\n  countries      Json     @default(\"{}\")\n  languages      Json     @default(\"{}\")\n  devices        Json     @default(\"{}\")\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  @@map(\"analytics\")\n}\n\n// IAM Policy Model\nmodel IAMPolicy {\n  id          String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name        String   @unique\n  description String\n  permissions String[]\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  @@map(\"iam_policies\")\n}\n\n// Department Model\nmodel Department {\n  id        String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  name      String   @unique\n  code      String   @unique\n  school    String\n  isActive  Boolean  @default(true)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"departments\")\n}\n\n// Convocation Event Model\nmodel Convocation {\n  id                    String   @id @default(auto()) @map(\"_id\") @db.ObjectId\n  title                 String\n  description           String?\n  eventDate             DateTime\n  registrationStartDate DateTime\n  registrationEndDate   DateTime\n  venue                 String\n  isActive              Boolean  @default(true)\n  maxAttendees          Int?\n  createdAt             DateTime @default(now())\n  updatedAt             DateTime @updatedAt\n\n  @@map(\"convocations\")\n}\n\n// Enums\nenum UserRole {\n  ADMIN\n  STAFF\n  STUDENT\n}\n\nenum AccountState {\n  ACTIVE\n  INACTIVE\n  SUSPENDED\n  PENDING_VERIFICATION\n}\n\nenum TransactionStatus {\n  PENDING\n  COMPLETED\n  FAILED\n  CANCELLED\n  REFUNDED\n}\n\nenum EnclosureType {\n  STUDENTS\n  FACULTY\n  STAFF\n  GUESTS\n  VIP\n  MIXED\n}\n\nenum Direction {\n  NORTH\n  SOUTH\n  EAST\n  WEST\n  NORTHEAST\n  NORTHWEST\n  SOUTHEAST\n  SOUTHWEST\n  LEFT // For simple left/right entry\n  RIGHT\n  CENTER\n}\n",
  "inlineSchemaHash": "8c6e35d1a7154fef15f52e860ab7f5ae467d7130f1788f0cb5b087e7c830c4d9",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileImageURL\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"assignedIAMPolicies\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountState\",\"kind\":\"enum\",\"type\":\"AccountState\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"attendees\",\"kind\":\"object\",\"type\":\"Attendee\",\"relationName\":\"AccountToAttendee\"}],\"dbName\":\"accounts\"},\"Attendee\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"enrollmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"school\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"degree\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"convocationEligible\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"convocationRegistered\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"assignedEnclosure\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"crr\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"account\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToAttendee\"},{\"name\":\"accountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"allocation\",\"kind\":\"object\",\"type\":\"SeatAllocation\",\"relationName\":\"AttendeeToSeatAllocation\"}],\"dbName\":\"attendees\"},\"SeatAllocation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"enclosureLetter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rowLetter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"seatNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"allocatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enclosure\",\"kind\":\"object\",\"type\":\"Enclosure\",\"relationName\":\"EnclosureToSeatAllocation\"},{\"name\":\"enclosureId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attendee\",\"kind\":\"object\",\"type\":\"Attendee\",\"relationName\":\"AttendeeToSeatAllocation\"},{\"name\":\"attendeeId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"seat_allocations\"},\"Enclosure\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"letter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"allocatedFor\",\"kind\":\"enum\",\"type\":\"EnclosureType\"},{\"name\":\"entryDirection\",\"kind\":\"enum\",\"type\":\"Direction\"},{\"name\":\"displayOrder\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalSeats\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"rows\",\"kind\":\"object\",\"type\":\"Row\",\"relationName\":\"EnclosureToRow\"},{\"name\":\"seatAllocations\",\"kind\":\"object\",\"type\":\"SeatAllocation\",\"relationName\":\"EnclosureToSeatAllocation\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"enclosures\"},\"Row\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"letter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startSeat\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"endSeat\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reservedSeats\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"displayOrder\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"enclosure\",\"kind\":\"object\",\"type\":\"Enclosure\",\"relationName\":\"EnclosureToRow\"},{\"name\":\"enclosureId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"rows\"},\"SeatReservation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"enclosureLetter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rowLetter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"seatNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"reservedFor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reservedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"seat_reservations\"},\"Analytics\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"visitors\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"pageViews\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"uniqueVisitors\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"countries\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"languages\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"devices\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"analytics\"},\"IAMPolicy\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"permissions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"iam_policies\"},\"Department\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"school\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"departments\"},\"Convocation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"_id\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"eventDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"registrationStartDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"registrationEndDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"venue\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"maxAttendees\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"convocations\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

